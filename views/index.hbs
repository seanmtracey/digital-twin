<main>

    <header>
        <h2>Digital Twins</h2>
    </header>

    <ul id="twins">
        {{#each twins}}

            <li class="item" style="background-image: url('/images/placeholder-twin.jpg')">
                <div class="viewOptions">
                    <a href="/view/{{UUID}}" target="_blank">View</a>
                    <a href="/edit/{{UUID}}" target="_blank">Edit</a>
                </div>
                <a class="subOptionsToggle" data-open="false"></a>
                <ul class="subOptions" data-visible="false">
                    <li data-action="duplicate">Duplicate Twin</li>
                    <li data-action="delete">Delete Twin</li>
                </ul>
                <div class="details">
                    <h3>{{name}}</h3>
                    <p>Created by {{owner}}</p>
                </div>
            </li>

        {{/each}}

        <!--<li class="item" style="background-image: url('/images/placeholder-twin.jpg')">
            <div class="viewOptions">
                <a href="/view">View</a>
                <a href="/edit">Edit</a>
            </div>
            <a class="subOptionsToggle"><img src="images/sub-menu-icon.png"></a>
            <ul class="subOptions" data-visible="false">
                <li>Duplicate</li>
                <li>Delete</li>
            </ul>
            <div class="details">
                <h3>First Twin</h3>
                <p>Created by Sean M. Tracey</p>
            </div>
        </li>-->

        <li class="item" id="createNew" data-active="false"> </li>
    </ul>

    <div id="createTwinDialog" data-visible="false">
        <div class="wrapper">
            <div id="closeCreationDialog" class="closeDialogBtn"></div>
            <h3>Create new Digital Twin</h3>
            <form>
                <input type="text" name="twinname" placeholder="Enter Digital Twin name" />

                <div id="brokerConfig" class="side-by-side">
                    <input type="text" name="twinbroker" placeholder="MQTT Broker Host" />
                    <input type="text" name="port" placeholder="Port" />
                    <button id="testBrokerConnection" type="button" data-testing="false">Test</button>
                    <div id="status"></div>
                </div>

                <input type="submit" value="Create Twin" />
            </form>
        </div>
    </div>

</main>

<script>

    (function(){

        'use strict';

        Array.from( document.querySelectorAll('#twins .item .subOptionsToggle') ).forEach(subOptionsToggle => {

            subOptionsToggle.addEventListener('click', function(e){
                
                this.dataset.open = this.dataset.open === "true" ? "false" : "true"
                const options = this.parentNode.querySelector('.subOptions');

                if(options.dataset.visible === "false"){
                    options.dataset.visible = "true";
                } else {
                    options.dataset.visible = "false";
                }

            }, false);

        });

        const createTwinBtn = document.querySelector("#createNew");
        const createTwinDialog = document.querySelector('#createTwinDialog');
        const closeCreateDialogBtn = createTwinDialog.querySelector('.closeDialogBtn');
        const createTwinForm = createTwinDialog.querySelector('form');
        const brokerConfig = createTwinDialog.querySelector('#brokerConfig');
        const testBrokerConnection = brokerConfig.querySelector('#testBrokerConnection');
        const statusIndicator = brokerConfig.querySelector('#status');

        const websocketProtocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
        let ws;

        createTwinForm.addEventListener('submit', function(e){

            e.preventDefault();
            e.stopImmediatePropagation();

            const brokerHostInput = brokerConfig.querySelector('input[name="twinbroker"]').value;
            const brokerAddress = brokerHostInput.startsWith('mqtt://') ? brokerHostInput : `mqtt://${brokerHostInput}`;
            const brokerPortInput = brokerConfig.querySelector('input[name="port"]').value;
            const brokerPort = brokerPortInput === undefined ? '1883' : brokerPortInput;

            fetch(`/twins/create`, {
                    method : "POST",
                    headers : {
                        "Content-Type" : "application/json"
                    },
                    body : JSON.stringify({
                        name : this[0].value,
                        broker : brokerAddress,
                        port : brokerPort
                    })
                })
                .then(response => {
                    if(response.ok){
                        return response.json();
                    } else {
                        throw response;
                    }
                })
                .then(response => {
                    console.log(response);
                    window.location = `/edit/${response.data.UUID}`;
                })
                .catch(err => {
                    console.log("Create twin err:", err);
                })
            ;

        }, false);

        createTwinBtn.addEventListener('click', function(e){
            e.preventDefault();

            createTwinForm.reset();
            createTwinDialog.dataset.visible = "true";

        }, false);

        closeCreateDialogBtn.addEventListener('click', function(e){

            createTwinDialog.dataset.visible = "false";
            createTwinForm.reset();

        }, false);

        testBrokerConnection.addEventListener('click', function(e){

            if(this.dataset.testing === "false"){

                this.dataset.testing = "true";

                const brokerHostInput = brokerConfig.querySelector('input[name="twinbroker"]').value;
                const brokerAddress = brokerHostInput.startsWith('mqtt://') ? brokerHostInput : `mqtt://${brokerHostInput}`;
                const brokerPortInput = brokerConfig.querySelector('input[name="port"]').value;
                const brokerPort = brokerPortInput === "" ? '1883' : brokerPortInput;

                function connectToWebSocketServer(){

                    ws = new WebSocket(`${websocketProtocol}://${window.location.host}`);

                    statusIndicator.dataset.status = "connecting";

                    ws.addEventListener('open', function(e){
                        console.log(`Websocket connection opened`, e);
                        ws.send(JSON.stringify({
                            type : 'connect',
                            data : {
                                connectionDetails : {
                                    broker : brokerAddress,
                                    port : brokerPort
                                }
                            }
                        }));

                    });

                    ws.addEventListener('message', function(e){
                        console.log(e);

                        const data = JSON.parse(e.data);

                        if(data.status === "ok"){
                            statusIndicator.dataset.status = "success";
                        } else if(data.status === "err"){
                            statusIndicator.dataset.status = "fail";
                        }

                        testBrokerConnection.dataset.testing = "false";

                        if(ws.readyState === 1){
                            ws.close();
                        }

                    });

                }

                connectToWebSocketServer();

                console.log(brokerHostInput, brokerAddress, brokerPortInput, brokerPort);

            }

        }, false);

        document.body.addEventListener('click', function(e){

            console.log(e.target);

            if(!e.target.parentNode.classList.contains('subOptions') && !e.target.classList.contains('subOptionsToggle')){

                Array.from( document.querySelectorAll('.subOptions') ).forEach(subOption => {
                    subOption.dataset.visible = "false";
                });

                Array.from( document.querySelectorAll('.subOptionsToggle') ).forEach(subOptionToggle => {
                    subOptionToggle.dataset.open = "false";
                });

            }


        }, false);

    }());

</script>