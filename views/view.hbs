<main>

    <div id="nodes">

        <!-- The output are where nodes are persisted -->

    </div>
    <script src="/scripts/twin_nodes.js"></script>
    <script>

        (function(){

            'use strict';

            function evaluateRules(node, data){
                
                if(node.dataset.rules){
                    
                    const rules = JSON.parse(JSON.parse(node.dataset.rules));

                    rules.forEach(function(rule){

                        if(data[rule.property] === rule.value){
                            console.log('matched rule');
                            node.style.backgroundColor = rule.action;
                        } else {
                            console.log('no match');
                        }

                    });

                }

            }

            const twinUUID = "{{twinData.UUID}}";
            const nodesHolder = document.querySelector('#nodes');

            // Reconstruct pre-existing nodes
            const existingNodes = JSON.parse(`{{{ twinData.nodes }}}`);

            existingNodes.forEach(savedNode => {
                // x, y, width, height, type, name, topic, rules
                const recreatedNode = twinNodes.create(savedNode.left, savedNode.top, savedNode.width, savedNode.height, savedNode.type, savedNode.name, savedNode.topic, JSON.stringify(savedNode.rules) );
                nodesHolder.appendChild(recreatedNode);
            });

            const ws = new WebSocket(`ws://${window.location.host}`);

            ws.addEventListener('open', function(e){
               console.log(`Websocket connection opened`, e); 
               ws.send(JSON.stringify({
                    type : 'connect',
                    data : {
                        connectionDetails : {
                            broker : `{{{twinData.broker}}}`,
                            port : 1883
                        }
                    }
                }));
                
            });
            
            ws.addEventListener('message', function(e){
                console.log(e);
                const payload = JSON.parse(e.data);
                console.log('Parsed data:', payload);

                if(payload.status === 'ok'){

                    if(payload.type === 'connectionStatus'){

                        if(payload.data === 'connected'){

                            Array.from(nodesHolder.querySelectorAll('.node')).forEach(node => {
                                
                                if(node.dataset.topic){

                                    ws.send(JSON.stringify({
                                        type : 'subscribe',
                                        data : {
                                            topic : node.dataset.topic
                                        }
                                    }));

                                }

                            });

                        }

                    }

                    if(payload.type === 'data'){
                        console.log('BROKER DATA:', payload.data);

                        Array.from(nodesHolder.querySelectorAll('.node')).forEach(node => {
                            
                            if(node.dataset.topic === payload.data.topic){
                                evaluateRules(node, JSON.parse(payload.data.data) );
                            }
                            
                        });

                    }

                }

            });
            
            ws.addEventListener('error', function(err){
                console.log('Websocket connection error:', err);
            });

        }());

    </script>

</main>