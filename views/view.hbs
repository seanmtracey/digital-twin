<main>

    <div id="nodes">

        <!-- The output are where nodes are persisted -->

    </div>

    <script>

        (function(){

            'use strict';

            function generateRandomID(length = 8){

                const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ_-abcdefghijklmnopqrstuvwxyz0123456789";
                const code = [];
                let remainingCharacters = length;

                while(remainingCharacters > 0){

                    code.push( characters[ Math.random() * characters.length | 0 ] );

                    remainingCharacters -= 1;

                }

                return code.join('');

            }

            function createNode(x, y, width, height, type = selectedTool, name){

                width = width < 0 ? -width : width;
                height = height < 0 ? -height : height;

                const div = document.createElement('div');
                
                div.dataset.left = x;
                div.dataset.top = y;
                div.dataset.width = width;
                div.dataset.height = height;
                div.dataset.selected = "false";
                div.dataset.type = type;
                div.dataset.name = name;

                div.classList.add('node');
                div.setAttribute("style", `left: ${x}px; top: ${y}px; width: ${width}px; height: ${height}px; background-color: #e6e6e6;`);

                return div;

            }

            const twinUUID = "{{twinData.UUID}}";
            const nodesHolder = document.querySelector('#nodes');

            // Reconstruct pre-existing nodes
            const existingNodes = JSON.parse(`{{{ twinData.nodes }}}`);

            existingNodes.forEach(savedNode => {
                // x, y, width, height, type = selectedTool
                const recreatedNode = createNode(savedNode.left, savedNode.top, savedNode.width, savedNode.height, savedNode.type);
                nodesHolder.appendChild(recreatedNode);

            });

            const ws = new WebSocket(`ws://${window.location.host}`);

            ws.addEventListener('open', function(e){
               console.log(`Websocket connection opened`, e); 
               ws.send(JSON.stringify({
                    type : 'connect',
                    data : {
                        connectionDetails : {
                            broker : 'mqtt://mqtt.eclipse.org',
                            port : 1883
                        }
                    }
                }));
                
            });
            
            ws.addEventListener('message', function(e){
                console.log(e);
                const payload = JSON.parse(e.data);
                console.log('Parsed data:', payload);

                if(payload.status === 'ok'){

                    if(payload.type === 'connectionStatus'){

                        if(payload.data === 'connected'){

                            ws.send(JSON.stringify({
                                type : 'subscribe',
                                data : {
                                    topic : '#'
                                }
                            }));

                        }

                    }

                    if(payload.type === 'data'){
                        console.log('BROKER DATA:', payload.data);
                    }

                }

            });
            
            ws.addEventListener('error', function(err){
                console.log('Websocket connection error:', err);
            });

        }());

    </script>

</main>